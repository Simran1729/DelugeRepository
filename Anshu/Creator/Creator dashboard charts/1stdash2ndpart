<%{
	/* 1) Retrieve "Apples" record and user inputs */
	furit = Fruit_Type[Fruit_Type == "Apples"];
	if(input.varietal == null)
	{
		varietalList = "4563295000000030003";
		varietalList = varietalList.toCollection();
	}
	else
	{
		varietalList = input.varietal.toCollection();
	}
	if(input.year1 == null)
	{
		yearList = "2025";
		yearList = yearList.toCollection();
	}
	else
	{
		yearList = input.year1.toCollection();
	}
	//Graph 1,2 previous year calculation 
	prevTotalTonnes = 0.0;
	prevJuiceTonnes = 0.0;
	prevExportTonnes = 0.0;
	prevExportHectare = 0.0;
	prevJuiceHectare = 0.0;
	prevTotalHectare = 0.0;
	smallestYear = 100000;
	for each  small in yearList
	{
		yearr = small.toNumber();
		if(yearr < smallestYear)
		{
			smallestYear = yearr;
		}
	}
	i = 1;
	for each  rec in yearList
	{
		localExportTonnage = 0.0;
		localJuiceTonnage = 0.0;
		localExportHectare = 0.0;
		localJuiceHectare = 0.0;
		smallestYear = smallestYear - i;
		yearVal = smallestYear.toString();
		firstDate = ("01-Jan-" + yearVal).toDate();
		lastDate = ("01-Dec-" + (yearVal.toNumber() + 1).toString()).toDate().addDay(-1);
		for each  varietalID in varietalList
		{
			binRecords = Capture_Form[Varietal1 == varietalID.toNumber() && Fruit_Type == furit.ID && Date_Picked >= firstDate && Date_Picked <= lastDate];
			// For each bin, add up tonnage and hectares
			for each  binRec in binRecords
			{
				if(binRec.Grade_Pears_Apples == "Export")
				{
					localExportTonnage = localExportTonnage + binRec.Tonnes;
					localExportHectare = localExportHectare + binRec.Block_Hectare_Size;
				}
				else if(binRec.Grade_Pears_Apples == "Juice")
				{
					localJuiceTonnage = localJuiceTonnage + binRec.Tonnes;
					localJuiceHectare = localJuiceHectare + binRec.Block_Hectare_Size;
				}
			}
		}
		// Compute total tonnage (Export + Juice)
		localTotalTonnage = localExportTonnage + localJuiceTonnage;
		// Compute total hectares
		localTotalHectare = localExportHectare + localJuiceHectare;
		// Update grand totals
		prevExportTonnes = prevExportTonnes + localExportTonnage;
		prevJuiceTonnes = prevJuiceTonnes + localJuiceTonnage;
		prevTotalTonnes = prevTotalTonnes + localTotalTonnage;
		prevExportHectare = prevExportHectare + localExportHectare;
		prevJuiceHectare = prevJuiceHectare + localJuiceHectare;
		prevTotalHectare = prevTotalHectare + localTotalHectare;
		i = i + 1;
	}
	prevExportTH = 0.0;
	if(prevExportHectare > 0.0)
	{
		prevExportTH = prevExportTonnes / prevExportHectare;
	}
	prevJuiceTH = 0.0;
	if(prevJuiceHectare > 0.0)
	{
		prevJuiceTH = prevJuiceTonnes / prevJuiceHectare;
	}
	/*
     * Instead of standard ratio for total T/H, 
     * define it as the sum of the two sub-ratios:
     */
	prevTotalTH = prevExportTH + prevJuiceTH;
	// Graph 1,2 previous year calculation end 
	// Overall sums for Tonnage
	grandExportTonnage = 0.0;
	grandJuiceTonnage = 0.0;
	grandTotalTonnage = 0.0;
	// Overall sums for Hectares
	grandExportHectare = 0.0;
	grandJuiceHectare = 0.0;
	grandTotalHectare = 0.0;
	// We'll store per-year data in a list of maps
	yearData = List();
	/* 2) Loop over each year to compute tonnage and hectares */
	for each  yearVal1 in yearList
	{
		// Per-year tonnage
		localExportTonnage = 0.0;
		localJuiceTonnage = 0.0;
		// Per-year hectares
		localExportHectare = 0.0;
		localJuiceHectare = 0.0;
		firstDate = ("01-Jan-" + yearVal1).toDate();
		lastDate = ("01-Dec-" + (yearVal1.toNumber() + 1).toString()).toDate().addDay(-1);
		// Gather bins for each varietal
		for each  varietalID in varietalList
		{
			binRecords = Capture_Form[Varietal1 == varietalID.toNumber() && Fruit_Type == furit.ID && Date_Picked >= firstDate && Date_Picked <= lastDate];
			// For each bin, add up tonnage and hectares
			for each  binRec in binRecords
			{
				if(binRec.Grade_Pears_Apples == "Export")
				{
					localExportTonnage = localExportTonnage + binRec.Tonnes;
					localExportHectare = localExportHectare + binRec.Block_Hectare_Size;
				}
				else if(binRec.Grade_Pears_Apples == "Juice")
				{
					localJuiceTonnage = localJuiceTonnage + binRec.Tonnes;
					localJuiceHectare = localJuiceHectare + binRec.Block_Hectare_Size;
				}
			}
		}
		// Compute total tonnage (Export + Juice)
		localTotalTonnage = localExportTonnage + localJuiceTonnage;
		// Compute total hectares
		localTotalHectare = localExportHectare + localJuiceHectare;
		// Update grand totals
		grandExportTonnage = grandExportTonnage + localExportTonnage;
		grandJuiceTonnage = grandJuiceTonnage + localJuiceTonnage;
		grandTotalTonnage = grandTotalTonnage + localTotalTonnage;
		grandExportHectare = grandExportHectare + localExportHectare;
		grandJuiceHectare = grandJuiceHectare + localJuiceHectare;
		grandTotalHectare = grandTotalHectare + localTotalHectare;
		// Tonnes/Hectare per year
		exportTH = 0.0;
		if(localExportHectare > 0.0)
		{
			exportTH = localExportTonnage / localExportHectare;
		}
		juiceTH = 0.0;
		if(localJuiceHectare > 0.0)
		{
			juiceTH = localJuiceTonnage / localJuiceHectare;
		}
		totalTH = exportTH + juiceTH;
		// Store everything in a map for chart rendering
		dataMap = Map();
		dataMap.put("year",yearVal1);
		// Tonnage
		dataMap.put("exportTonnage",localExportTonnage);
		dataMap.put("juiceTonnage",localJuiceTonnage);
		dataMap.put("totalTonnage",localTotalTonnage);
		// T/H
		dataMap.put("exportTH",exportTH);
		dataMap.put("juiceTH",juiceTH);
		dataMap.put("totalTH",totalTH);
		yearData.add(dataMap);
	}
	/* 3) Compute overall T/H across all years (optional) */
	// We'll still compute standard ratio for exportTH, juiceTH individually
	grandExportTH = 0.0;
	if(grandExportHectare > 0.0)
	{
		grandExportTH = grandExportTonnage / grandExportHectare;
	}
	grandJuiceTH = 0.0;
	if(grandJuiceHectare > 0.0)
	{
		grandJuiceTH = grandJuiceTonnage / grandJuiceHectare;
	}
	/*
     * Instead of standard ratio for total T/H, 
     * define it as the sum of the two sub-ratios:
     */
	grandTotalTH = grandExportTH + grandJuiceTH;
	/* 4) Find dynamic max for Tonnage chart */
	tonnageMax = 0.0;
	for each  yr in yearData
	{
		if(yr.get("totalTonnage") > tonnageMax)
		{
			tonnageMax = yr.get("totalTonnage");
		}
		if(yr.get("exportTonnage") > tonnageMax)
		{
			tonnageMax = yr.get("exportTonnage");
		}
		if(yr.get("juiceTonnage") > tonnageMax)
		{
			tonnageMax = yr.get("juiceTonnage");
		}
	}
	if(tonnageMax == 0)
	{
		tonnageMax = 1;
	}
	/* 5) Find dynamic max for T/H chart */
	thMax = 0.0;
	for each  yr2 in yearData
	{
		if(yr2.get("totalTH") > thMax)
		{
			thMax = yr2.get("totalTH");
		}
		if(yr2.get("exportTH") > thMax)
		{
			thMax = yr2.get("exportTH");
		}
		if(yr2.get("juiceTH") > thMax)
		{
			thMax = yr2.get("juiceTH");
		}
	}
	if(thMax == 0)
	{
		thMax = 1;
	}
	/* 6) Convert each year’s Tonnage to pixel heights */
	tonnageContainerHeight = 200.0;
	for each  yr3 in yearData
	{
		expPx = yr3.get("exportTonnage").toNumber() / tonnageMax * tonnageContainerHeight;
		juiPx = yr3.get("juiceTonnage").toNumber() / tonnageMax * tonnageContainerHeight;
		totPx = yr3.get("totalTonnage").toNumber() / tonnageMax * tonnageContainerHeight;
		yr3.put("exportPx",expPx);
		yr3.put("juicePx",juiPx);
		yr3.put("totalPx",totPx);
	}
	/* 7) Convert each year’s T/H to pixel heights */
	thContainerHeight = 200.0;
	for each  yr4 in yearData
	{
		expPxTH = yr4.get("exportTH").toNumber() / thMax * thContainerHeight;
		juiPxTH = yr4.get("juiceTH").toNumber() / thMax * thContainerHeight;
		totPxTH = yr4.get("totalTH").toNumber() / thMax * thContainerHeight;
		yr4.put("exportPxTH",expPxTH);
		yr4.put("juicePxTH",juiPxTH);
		yr4.put("totalPxTH",totPxTH);
	}
	/* 8) Build Y-axis labels for Tonnage (0..tonnageMax) */
	tonnageSteps = 5;
	tonnageLabels = List();
	idxList = {0,1,2,3,4,5};
	for each  i in idxList
	{
		lblVal = (tonnageMax - i * tonnageMax / tonnageSteps).round(2);
		tonnageLabels.add(lblVal);
	}
	/* 9) Build Y-axis labels for T/H (0..thMax) */
	thSteps = 5;
	thLabels = List();
	for each  i in idxList
	{
		lblValTH = (thMax - i * thMax / thSteps).round(2);
		thLabels.add(lblValTH);
	}
	%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Integrated Tonnage & T/H Charts (Sum T/H)</title>
  <style>
    /* Global Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, sans-serif;
    }
    body {
      background-color: #d0d2d6;
      color: #000;
      padding: 10px;
    }
    /* Titles */
    .ans-main-title, .ans-sub-title {
      text-align: center;
      font-weight: bold;
      margin-bottom: 10px;
    }
    .ans-main-title { font-size: 20px; }
    .ans-sub-title  { font-size: 18px; margin-top: 20px; }
    
    /* Metrics Section */
    .ans-metrics-container {
      display: flex;
      justify-content: space-around;
      margin-bottom: 10px;
      text-align: center;
    }
    .ans-metric-box {
      flex: 1;
      padding: 5px;
      max-width: 180px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .ans-metric-title { font-size: 14px; margin-bottom: 3px; color: #666; }
    .ans-metric-value { font-size: 28px; font-weight: bold; margin-bottom: 2px; }
    .ans-previous-year { font-size: 10px; color: #999; }
    
    /* Legend */
    .ans-legend {
      display: flex;
      justify-content: center;
      margin-bottom: 5px;
    }
    .rot-text {
  transform: rotate(-90deg);
  
  white-space: nowrap;
}
    .ans-legend-item {
      display: flex;
      align-items: center;
      margin: 0 5px;
    }
    .ans-legend-color {
      width: 10px;
      height: 10px;
      margin-right: 3px;
    }
    
    /* Chart Wrapper */
    .ans-chart-wrapper {
      margin-bottom: 20px;
    }
    
    /* Bars Row */
    .ans-bars-row {
      position: relative;
      display: flex;
      align-items: flex-end;
      border-bottom: 1px solid #999;
      min-height: 200px;
      padding-bottom: 5px;
      padding-left: 30px; /* Added padding to prevent overlap with y-axis */
    }
    .ans-y-axis {
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      font-size: 10px;
      color: #333;
      padding-right: 5px;
    }
    
    /* Year Group */
    .ans-year-group {
      flex: 0 0 70px;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-left: 20px;
      position: relative;
      justify-content: flex-end;
      height: 100%;
    }
    .ans-year-group:first-child { margin-left: 0; }
    
    /* Bar Container & Bars - Renamed classes */
    .ans-bar-container {
      display: flex;
      align-items: flex-end;
    }
    .ans-chart-bar, .ans-chart-bar-perc {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 25px;
      margin: 0 2px;
      position: relative;
    }
    .ans-chart-bar span, .ans-chart-bar-perc span {
      font-size: 10px;
      color: #fff;
    }
    
    /* Year Label */
    .ans-year-label {
      position: absolute;
      bottom: -20px;
      width: 100%;
      text-align: center;
      font-size: 10px;
      white-space: nowrap;
    }
    
    /* Colors */
    .ans-total-bar { background-color: #4d3c43; }
    .ans-export-bar { background-color: #4a6c5d; }
    .ans-juice-bar { background-color: #a05a2c; }
    
    /* Footer */
    .ans-footer {
      text-align: center;
      font-weight: bold;
      font-size: 12px;
      margin-top: 10px;
    }
  </style>
</head>
<body>

  <!-- CHART #1: TOTAL TONNAGE -->
  <div class="ans-main-title">TOTAL TONNAGE FOR ALL APPLES</div>
  <br>
  <!-- Metrics for Tonnage -->
  <div class="ans-metrics-container">
    <div class="ans-metric-box">
      <div class="ans-metric-title">TOTAL TONNES</div>
      <div class="ans-metric-value"><%=grandTotalTonnage.round(2)%></div>
      <div class="ans-previous-year">PREVIOUS PERIOD <%=prevTotalTonnes%></div>
    </div>
    <div class="ans-metric-box">
      <div class="ans-metric-title">EXPORT TONNES</div>
      <div class="ans-metric-value" style="color:#4a6c5d;"><%=grandExportTonnage.round(2)%></div>
      <div class="ans-previous-year">PREVIOUS PERIOD <%=prevExportTonnes%></div>
    </div>
    <div class="ans-metric-box">
      <div class="ans-metric-title">JUICE TONNES</div>
      <div class="ans-metric-value" style="color:#a05a2c;"><%=grandJuiceTonnage.round(2)%></div>
      <div class="ans-previous-year">PREVIOUS PERIOD <%=prevJuiceTonnes%></div>
    </div>
  </div>
  <br>
  <!-- Legend for Tonnage -->
  <div class="ans-legend">
    <div class="ans-legend-item">
      <div class="ans-legend-color ans-total-bar"></div>
      <div>Total</div>
    </div>
    <div class="ans-legend-item">
      <div class="ans-legend-color ans-export-bar"></div>
      <div>Export</div>
    </div>
    <div class="ans-legend-item">
      <div class="ans-legend-color ans-juice-bar"></div>
      <div>Juice</div>
    </div>
  </div>
  <br>
  <!-- Tonnage Chart -->
  <div class="ans-chart-wrapper">
    <div class="ans-bars-row">
      <!-- Y-axis Labels -->
      <div class="ans-y-axis">
<%
	for each  lbl in tonnageLabels
	{
		%>
<div><%=lbl%></div>
<%
	}
	%>
</div>
<%
	if(yearData.size() > 0)
	{
		for each  yr7 in yearData
		{
			%>
<div class="ans-year-group">
        <div class="ans-bar-container">
          <div class="ans-chart-bar ans-total-bar" style="height:<%=yr7.get("totalPx")%>px;">
            <span class="rot-text"><%=yr7.get("totalTonnage").round(2)%></span>
          </div>
          <div class="ans-chart-bar ans-export-bar" style="height:<%=yr7.get("exportPx")%>px;">
            <span class="rot-text"><%=yr7.get("exportTonnage").round(2)%></span>
          </div>
          <div class="ans-chart-bar ans-juice-bar" style="height:<%=yr7.get("juicePx")%>px;">
            <span class="rot-text"><%=yr7.get("juiceTonnage").round(2)%></span>
          </div>
        </div>
        <div class="ans-year-label"><%=yr7.get("year")%></div>
      </div>
<%
		}
	}
	else
	{
		%>
<p style="color:red; font-size:10px;">No data available.</p>
<%
	}
	%>
</div>
  </div>
  <div class="ans-footer">TOTAL TONNES YEAR / YEAR COMPARISON</div>
  <br>
  <!-- CHART #2: TONNES / HECTARE -->
  <div class="ans-sub-title">TONNES / HECTARE FOR ALL APPLES</div>
  <br>
  <!-- Metrics for T/H -->
  <div class="ans-metrics-container">
    <div class="ans-metric-box">
      <div class="ans-metric-title">TONNES / HECTARE</div>
      <div class="ans-metric-value"><%=grandTotalTH.round(2)%></div>
      <div class="ans-previous-year">PREVIOUS PERIOD <%=prevTotalTH.round(2)%></div>
    </div>
    <div class="ans-metric-box">
      <div class="ans-metric-title">TONNES / HECTARE</div>
      <div class="ans-metric-value" style="color:#4a6c5d;"><%=grandExportTH.round(2)%></div>
      <div class="ans-previous-year">PREVIOUS PERIOD <%=prevExportTH.round(2)%></div>
    </div>
    <div class="ans-metric-box">
      <div class="ans-metric-title">TONNES / HECTARE</div>
      <div class="ans-metric-value" style="color:#a05a2c;"><%=grandJuiceTH.round(2)%></div>
      <div class="ans-previous-year">PREVIOUS PERIOD <%=prevJuiceTH.round(2)%></div>
    </div>
  </div>
  <br>
  <!-- Legend for T/H -->
  <div class="ans-legend">
    <div class="ans-legend-item">
      <div class="ans-legend-color ans-total-bar"></div>
      <div>Total</div>
    </div>
    <div class="ans-legend-item">
      <div class="ans-legend-color ans-export-bar"></div>
      <div>Export</div>
    </div>
    <div class="ans-legend-item">
      <div class="ans-legend-color ans-juice-bar"></div>
      <div>Juice</div>
    </div>
  </div>
  <br>
  <!-- T/H Chart -->
  <div class="ans-chart-wrapper">
    <div class="ans-bars-row">
      <!-- Y-axis Labels -->
      <div class="ans-y-axis">
<%
	for each  lblTH in thLabels
	{
		%>
<div><%=lblTH%></div>
<%
	}
	%>
</div>
<%
	if(yearData.size() > 0)
	{
		for each  yr10 in yearData
		{
			%>
<div class="ans-year-group">
        <div class="ans-bar-container">
          <div class="ans-chart-bar ans-total-bar" style="height:<%=yr10.get("totalPxTH")%>px;">
            <span class="rot-text"><%=yr10.get("totalTH").round(2)%></span>
          </div>
          <div class="ans-chart-bar ans-export-bar" style="height:<%=yr10.get("exportPxTH")%>px;">
            <span class="rot-text"><%=yr10.get("exportTH").round(2)%></span>
          </div>
          <div class="ans-chart-bar ans-juice-bar" style="height:<%=yr10.get("juicePxTH")%>px;">
            <span class="rot-text"><%=yr10.get("juiceTH").round(2)%></span>
          </div>
        </div>
        <div class="ans-year-label"><%=yr10.get("year")%></div>
      </div>
<%
		}
	}
	else
	{
		%>
<p style="color:red; font-size:10px;">No data available.</p>
<%
	}
	%>
</div>
  </div>
  <div class="ans-footer">YEAR / YEAR COMPARISON FOR THE SAME DATE RANGE</div>

</body>
</html>
<%

}%>